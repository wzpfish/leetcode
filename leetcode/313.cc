/*
 * The naive idea is to use prioriy_queue and push every element generated by
 * primes into the queue, which got TLE.
 * However, we can maintain a queue that only store the smallest element per
 * prime, whose complexity is O(log(k) * N)
 */
struct Ugly {
  int value, idx, prime;
  Ugly(int v, int i, int p) {
    value = v;
    idx = i;
    prime = p;
  }
  bool operator<(const Ugly& rhs) const {
    return value > rhs.value;
  }
};

class Solution {
 public:
  int nthSuperUglyNumber(int n, vector<int>& primes) {
    vector<int> result(n, 0);
    result[0] = 1;
    priority_queue<Ugly> q;
    for (int i = 0; i < primes.size(); ++i) {
      q.emplace(primes[i], 1, primes[i]);
    }
    for (int i = 1; i < n; ++i) {
      auto top = q.top();
      result[i] = top.value;
      while (q.top().value == top.value) {
        auto next = q.top();
        q.pop();
        q.emplace(result[next.idx] * next.prime, next.idx + 1, next.prime);
      }
    }
    return result[n - 1];
  }
};
